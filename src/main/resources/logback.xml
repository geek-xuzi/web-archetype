<?xml version="1.0" encoding="UTF-8"?>
<configuration>

    <property name="LOG_HOME" value="${CATALINA_BASE}/logs" />

    <appender name="console" class="ch.qos.logback.core.ConsoleAppender">
        <!-- this is important, without this info level in thread will log out -->
        <filter class="ch.qos.logback.classic.filter.ThresholdFilter">
            <level>ERROR</level>
        </filter>
        <encoder>
            <pattern>[%X{QTRACER}][%X{M_HOS_CODE}][%X{M_MACHINE}][%X{cardNo}][%d{yyyy-MM-dd HH:mm:ss.SSS} %5p %logger{0}:%L] %msg%n</pattern>
        </encoder>
    </appender>

    <!-- http request log -->
    <appender name="accessAppender" class="ch.qos.logback.core.rolling.RollingFileAppender">
        <file>${LOG_HOME}/request.log</file>
        <rollingPolicy class="ch.qos.logback.core.rolling.TimeBasedRollingPolicy">
            <fileNamePattern>${LOG_HOME}/request.log.%d{yyyy-MM-dd}.gz</fileNamePattern>
            <MaxHistory>30</MaxHistory>
        </rollingPolicy>
        <encoder>
            <pattern>[%X{QTRACER}][%X{M_HOS_CODE}][%X{M_MACHINE}][%X{cardNo}][%d{yyyy-MM-dd HH:mm:ss.SSS} %5p %logger{0}:%L] %msg%n
            </pattern>
        </encoder>
    </appender>

    <appender name="mtsAppender" class="ch.qos.logback.core.rolling.RollingFileAppender">
        <file>${LOG_HOME}/mts.log</file>
        <rollingPolicy class="ch.qos.logback.core.rolling.TimeBasedRollingPolicy">
            <fileNamePattern>${LOG_HOME}/mts.log.%d{yyyy-MM-dd}.gz</fileNamePattern>
            <MaxHistory>30</MaxHistory>
        </rollingPolicy>
        <encoder>
            <pattern>[%X{QTRACER}][%X{M_HOS_CODE}][%X{M_MACHINE}][%X{cardNo}][%d{yyyy-MM-dd HH:mm:ss.SSS} %5p %logger{0}:%L] %msg%n
            </pattern>
        </encoder>
    </appender>

    <!-- 异步输出 -->
    <appender name ="asyncConsoleAppender" class= "ch.qos.logback.classic.AsyncAppender">
        <!-- 不丢失日志.默认的,如果队列的80%已满,则会丢弃TRACT、DEBUG、INFO级别的日志 -->
        <!-- <discardingThreshold >0</discardingThreshold>  -->
        <!-- 更改默认的队列的深度,该值会影响性能.默认值为256 -->
        <queueSize>50000</queueSize>
        <includeCallerData>true</includeCallerData>
        <!-- 添加附加的appender,最多只能添加一个 -->
        <appender-ref ref ="console"/>
    </appender>

    <!-- 异步输出 -->
    <appender name ="asyncAccessAppender" class= "ch.qos.logback.classic.AsyncAppender">
        <!-- 不丢失日志.默认的,如果队列的80%已满,则会丢弃TRACT、DEBUG、INFO级别的日志 -->
        <!-- <discardingThreshold >0</discardingThreshold>  -->
        <!-- 更改默认的队列的深度,该值会影响性能.默认值为256 -->
        <queueSize>50000</queueSize>
        <!-- 添加附加的appender,最多只能添加一个 -->
        <appender-ref ref ="accessAppender"/>
    </appender>

    <!-- 异步输出 -->
    <appender name ="asyncMtsAppender" class= "ch.qos.logback.classic.AsyncAppender">
        <!-- 不丢失日志.默认的,如果队列的80%已满,则会丢弃TRACT、DEBUG、INFO级别的日志 -->
        <!-- <discardingThreshold >0</discardingThreshold>  -->
        <!-- 更改默认的队列的深度,该值会影响性能.默认值为256 -->
        <queueSize>50000</queueSize>
        <!-- 添加附加的appender,最多只能添加一个 -->
        <appender-ref ref ="mtsAppender"/>
    </appender>


    <root level="ERROR">
        <appender-ref ref="asyncConsoleAppender" />
    </root>

    <logger name="com.benmu" level="INFO">
        <appender-ref ref="asyncMtsAppender"/>
    </logger>

    <logger name="accessDataLog" level="INFO" additivity="false">
        <appender-ref ref="asyncAccessAppender"/>
    </logger>
</configuration>